# -*- coding: utf-8 -*-
"""Smith Waterman Algorithm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cV0186DaqrbCZOWePn9yaUQ9nvrgjIgV

# **AS2016525**
M.D.C. RUKSHAN SURIYAARATCHIE
"""

import numpy as np
seq1='ACATAG'
seq2='AATG'

matrix=np.zeros((len(seq1)+1,len(seq2)+1))

s_matrix=np.zeros((len(seq1),len(seq2)))
for i in range(len(seq1)):
    for j in range(len(seq2)):
        if seq1[i]==seq2[j]:
            s_matrix[i][j]=1
        else:     
            s_matrix[i][j]=-1
s_matrix

match_score=1
mismatch_score=-1
gap_penalty=-1

def smith_waterman(matrix):
   for i in range(1,len(seq1)+1):
       for j in range(1,len(seq2)+1):
            value=max(matrix[i-1][j-1]+s_matrix[i-1][j-1],matrix[i-1][j]+gap_penalty,matrix[i][j-1]+gap_penalty)
            if value>=0:
                matrix[i][j]=value
   return(matrix)

smith_waterman(matrix)

m=matrix.shape[0]
k=matrix[m-1:m,:]
for i in range(k.shape[1]):
    if matrix[m-1][i]==np.amax(k):
        nl=i
nl

AlignmentA=""
AlignmentB=""
i=len(seq1)
j=nl
while(matrix[i,j]!=0 and (i>0 or j>0)):
  if (i > 0 and j > 0 and matrix[i][j] == matrix[i-1][j-1] + s_matrix[i-1][j-1]):
  
    AlignmentA=seq1[i-1] + AlignmentA
    AlignmentB=seq2[j-1] + AlignmentB
    i=i - 1
    j=j - 1

  elif (i > 0 and matrix[i][j] == matrix[i-1][j] + gap_penalty):
  
    AlignmentA=seq1[i-1] + AlignmentA
    AlignmentB="-" + AlignmentB
    i=i - 1
  
  else:
  
    AlignmentA="-" + AlignmentA
    AlignmentB=seq2[j-1] + AlignmentB
    j=j - 1

Alignment = AlignmentA + " and " + AlignmentB

Alignment