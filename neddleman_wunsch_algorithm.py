# -*- coding: utf-8 -*-
"""Neddleman Wunsch Algorithm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tvRBkAo8jzqPklNhfsXDgbGKAYRpHWJu

## **AS2016525**
M.D.C.RUKSHAN SURIYAARATCHIE
"""

import numpy as np
seq1='ATTAC'
seq2='AATTC'

matrix=np.zeros((len(seq1)+1,len(seq2)+1))

s_matrix=np.zeros((len(seq1),len(seq2)))
for i in range(len(seq1)):
    for j in range(len(seq2)):
        if seq1[i]==seq2[j]:
            s_matrix[i][j]=1
        else:     
            s_matrix[i][j]=-1
s_matrix

match=1
mismatch=-1
gap=-1

def modified(matrix):
   for i in range(1,len(seq1)+1):
       for j in range(1,len(seq2)+1):
                if (i==len(seq1)):
                    matrix[i][j]=max(matrix[i-1][j-1]+s_matrix[i-1][j-1],matrix[i-1][j]+gap,matrix[i][j-1])
                elif (j==len(seq2)):
                    matrix[i][j]=max(matrix[i-1][j-1]+s_matrix[i-1][j-1],matrix[i-1][j],matrix[i][j-1]+gap)
                else:
                    matrix[i][j]=max(matrix[i-1][j-1]+s_matrix[i-1][j-1],matrix[i-1][j]+gap,matrix[i][j-1]+gap)
   return(matrix)

modified(matrix)

AlignmentA=""
AlignmentB=""
i=len(seq1)
j=len(seq2)
while (i >0 or j >0):

  if (i > 0 and j > 0 and matrix[i][j] == matrix[i-1][j-1] + s_matrix[i-1][j-1]):
  
    AlignmentA=seq1[i-1] + AlignmentA
    AlignmentB=seq2[j-1] + AlignmentB
    i=i - 1
    j=j - 1

  elif (i > 0 and matrix[i][j] == matrix[i-1][j] + gap):
  
    AlignmentA=seq1[i-1] + AlignmentA
    AlignmentB="-" + AlignmentB
    i=i - 1
  
  else:
  
    AlignmentA="-" + AlignmentA
    AlignmentB=seq2[j-1] + AlignmentB
    j=j - 1

Alignment = AlignmentA + " and " + AlignmentB

Alignment