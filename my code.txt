SEQUENCE_1 = 'ATTACT'  # Sequence 1 (Side Sequence)
SEQUENCE_2 = 'AATTCT'  # Sequence 2 (Top Sequence)
MATRIX_ROW_N = len(SEQUENCE_1) + 1  # Initiation Matrix Size (Rows)
MATRIX_COLUMN_N = len(SEQUENCE_2) + 1  # Initiation Matrix Size (Columns)
MATCH_SCORE = 1  # Match Score
MISMATCH_SCORE = -1  # Mismatch Score
GAP_SCORE = -1  # Gap Points
GAP_CHARACTER = '-  '  # Character to Represent Gaps in Final Alignemnts
ALN_PATHWAYS = []  # Initiating List of Discovered aln Pathways
score_matrix = [[[[None] for i in range(2)] for i in range(MATRIX_COLUMN_N)] for i in range(MATRIX_ROW_N)] # Initiating Score Matrix
alignments = []


def print_alns_only(alignments):  # Function to print only ALIGNMENTS
    print('Total Alignments: ' + str(len(alignments)))
    print('Overall Score: ' + str(alignments[0][3][0][1]) + '\n')
    for elem in alignments:
        print(elem[0] + '\n' + elem[1] + '\n')
    return


def scoring(match, mismatch, gap):
    global MATCH_SCORE, MISMATCH_SCORE, GAP_SCORE
    MATCH_SCORE = match
    MISMATCH_SCORE = mismatch
    GAP_SCORE = gap
    return MATCH_SCORE, MISMATCH_SCORE, GAP_SCORE


def find_path(c_i, c_j, path=''):  # Nested function to discover new aln pathways
    global ALN_PATHWAYS
    i = c_i
    j = c_j
    if i == 0 and j == 0:
        ALN_PATHWAYS.append(path)
        return 2
    dir_t = len(score_matrix[i][j][1])
    while dir_t <= 1:
        n_dir = score_matrix[i][j][1][0] if (i != 0 and j != 0) else (1 if i == 0 else (3 if j == 0 else 0))
        path = path + str(n_dir)
        if n_dir == 1:
            j = j - 1
        elif n_dir == 2:
            i = i - 1
            j = j - 1
        elif n_dir == 3:
            i = i - 1
        dir_t = len(score_matrix[i][j][1])
        if i == 0 and j == 0:
            ALN_PATHWAYS.append(path)
            return 3
    if dir_t > 1:
        for dir_c in range(dir_t):
            n_dir = score_matrix[i][j][1][dir_c] if (i != 0 and j != 0) else (1 if i == 0 else (3 if j == 0 else 0))
            tmp_path = path + str(n_dir)
            if n_dir == 1:
                n_i = i
                n_j = j - 1
            elif n_dir == 2:
                n_i = i - 1
                n_j = j - 1
            elif n_dir == 3:
                n_i = i - 1
                n_j = j
            find_path(n_i, n_j, tmp_path)
    return len(ALN_PATHWAYS)


def traceback(l_i, l_j):

    aln_count = 0
    # Compiling alignments based on discovered matrix pathways
    for elem in ALN_PATHWAYS:
        i = l_i - 1
        j = l_j - 1
        side_aln = ''
        top_aln = ''
        step = 0
        aln_info = []
        for n_dir_c in range(len(elem)):
            n_dir = elem[n_dir_c]
            score = score_matrix[i + 1][j + 1][0]
            step = step + 1
            aln_info.append([step, score, n_dir])
            if n_dir == '2':
                side_aln = side_aln + SEQUENCE_1[i]
                top_aln = top_aln + SEQUENCE_2[j]
                i = i - 1
                j = j - 1
            elif n_dir == '1':
                side_aln = side_aln + GAP_CHARACTER
                top_aln = top_aln + SEQUENCE_2[j]
                j = j - 1
            elif n_dir == '3':
                side_aln = side_aln + SEQUENCE_1[i]
                top_aln = top_aln + GAP_CHARACTER
                i = i - 1
        aln_count = aln_count + 1
        alignments.append([top_aln[::-1], side_aln[::-1], elem, aln_info, aln_count])

    print_alns_only(alignments)


def needle(seq1, seq2):

    global score_matrix
    global MATRIX_ROW_N
    global MATRIX_COLUMN_N
    global SEQUENCE_1
    global SEQUENCE_2

    SEQUENCE_1 = seq1
    SEQUENCE_2 = seq2
    MATRIX_ROW_N = len(SEQUENCE_1) + 1  # Initiation Matrix Size (Rows)
    MATRIX_COLUMN_N = len(SEQUENCE_2) + 1  # Initiation Matrix Size (Columns)

    score_matrix = [[[[None] for i in range(2)] for i in range(MATRIX_COLUMN_N)] for i in range(MATRIX_ROW_N)]
# Assign penalty values to first raw
    for i in range(MATRIX_ROW_N):
        score_matrix[i][0] = [GAP_SCORE * i, []]
    for j in range(MATRIX_COLUMN_N):
        score_matrix[0][j] = [GAP_SCORE * j, []]
        
# Fill score matrix
    for i in range(1, MATRIX_ROW_N):
        for j in range(1, MATRIX_COLUMN_N):
            score = MATCH_SCORE if (SEQUENCE_1[i - 1] == SEQUENCE_2[j - 1]) else MISMATCH_SCORE
            score_left = score_matrix[i][j - 1][0] + GAP_SCORE
            score_diag = score_matrix[i - 1][j - 1][0] + score
            score_up = score_matrix[i - 1][j][0] + GAP_SCORE
            o_val = [score_left, score_diag, score_up]
            score_matrix[i][j] = [max(o_val), [i + 1 for i, v in enumerate(o_val) if v == max(o_val)]]
            return i, j
    # i, j = scoring(MATCH_SCORE, MISMATCH_SCORE,GAP_SCORE)
    find_path(i, j)
    traceback(i, j)

    if __name__ == '__main__':
        needle('ATTAC', 'AATTC')
        
        